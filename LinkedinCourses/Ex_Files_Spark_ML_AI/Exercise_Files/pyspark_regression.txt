from pyspark.ml.regression import LinearRegression
pp_df = spark.read.csv('Folds5x2_pp.csv', header=True, inferSchema=True)
ppd_df.show(3)
pp_df.show(3)
from pyspark.ml.feature import VectorAsembler
from pyspark.ml.feature import VectorAssembler
vectorassembler = VectorAssembler(inputCols=['AT', 'V', 'AP', 'RH'], outputCol='features')
vpp_df = vectorassembler.transform(pp_df)
vpp_df.show(3)
lr = linearRegression(featuresCol='features', labelCol='PE')
lr = LinearRegression(featuresCol='features', labelCol='PE')
lr_model = lr.fit(vpp_Df)
lr_model = lr.fit(vpp_df)
lr_model
lr_model.summary()
lr_model.summary
lr_model.coefficients
lr_model.intercept
lr_model.summary.rootMeanSquaredError
lr_model.save('lr1.model')
import os
os.system('ls')
from pyspark.ml.regression import DecisionTreeRegressor
from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.ml.feature import VectorAssembler
pp_df.take(1)
pp_df.show(1)
vpp_df.take(1)
vpp_df.show(1)
splits = vpp_df.randomSplit([0.7, 0.3])
train_df = splits[0]
test_df = splits[1]
train_df.count()
test_df.count()
vpp_df.count()
dt = DecisionTreeRegressor(featuresCol='features', labelCol='PE')
dt_model = dt.fit(train_df)
dt_predictions = dt_model.transform(test_df)
dt_evaluator = RegressionEvaluator(labelCol='PE', predictionCol='prediction', metricName='rmse')
rmse = dt_evaluator.evaluate(dt_predictions)
rmse
from pyspark.ml.regression import GBTRegressor
gbt = GBTRegressor(featuresCol='features', labelCol='PE')
gbt_model = gbt.fit(train_df)
gbt_predictions = gbt_model.transform(test_df)
gbt_evaluator = RegressionEvaluator(labelCol='PE', predictionCol='prediction', metricName='rmse')
gbt_rmse = gbt_evaluator.evaluate(gbt_predictions)
gbt_rmse
import readline
os.system('.')
os.system('ls')
readline.write_history_file('pyspark_regression')
